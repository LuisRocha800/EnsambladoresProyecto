// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/ensambladoresproyecto/Lexer.flex

package ensambladoresproyecto;
import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\0"+
    "\1\5\1\0\1\6\2\0\1\5\1\7\1\10\2\0"+
    "\1\11\1\12\1\13\1\0\2\14\10\15\1\0\1\16"+
    "\4\0\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\0\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\0\1\47\6\0\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\0\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\0\1\47\12\0"+
    "\1\3\252\0\2\30\115\0\1\41\u01a8\0\2\3\u0100\0"+
    "\1\32\325\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\2\2\1\1\2\4"+
    "\1\2\23\1\1\0\1\5\5\0\1\6\1\7\3\0"+
    "\1\10\2\0\1\10\4\0\1\11\1\0\1\10\1\0"+
    "\1\12\6\0\3\3\1\13\2\0\1\13\27\0\1\3"+
    "\1\13\1\3\4\0\2\3\5\0\1\3\1\13\5\0"+
    "\1\4\10\0\1\3\1\0\1\3\2\0\1\13\2\0"+
    "\1\13\10\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[138];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\50\0\240\0\50\0\310"+
    "\0\360\0\u0118\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208"+
    "\0\u0230\0\u0258\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348"+
    "\0\u0370\0\u0398\0\u03c0\0\u03e8\0\u0410\0\u0438\0\170\0\170"+
    "\0\u0460\0\u0488\0\u04b0\0\u04d8\0\u0258\0\u0258\0\50\0\u0500"+
    "\0\u0528\0\u0550\0\50\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0618"+
    "\0\u0640\0\u0668\0\u0258\0\u0690\0\u06b8\0\u06e0\0\50\0\u0708"+
    "\0\u0730\0\u0758\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0848"+
    "\0\u0820\0\u0870\0\u0898\0\50\0\u08c0\0\u08e8\0\u0910\0\u0938"+
    "\0\u0960\0\u0988\0\u09b0\0\u09d8\0\u0a00\0\u0a28\0\u0370\0\u0a50"+
    "\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18\0\u0b40\0\u0b68\0\u0b90"+
    "\0\u0bb8\0\u0be0\0\u0c08\0\u0258\0\u0258\0\u0c30\0\u0c58\0\u0c80"+
    "\0\u0ca8\0\u06b8\0\u0cd0\0\u0cf8\0\u0d20\0\u0d48\0\u0d70\0\u0c30"+
    "\0\u0d98\0\u0dc0\0\u0de8\0\u0e10\0\u0e38\0\u0e60\0\u0e88\0\u0eb0"+
    "\0\50\0\u0ed8\0\u0f00\0\u0f28\0\u0f50\0\u0f78\0\u0fa0\0\u0fc8"+
    "\0\u0ff0\0\u1018\0\u1040\0\u0de8\0\u1068\0\u1090\0\u0fa0\0\u10b8"+
    "\0\u10e0\0\u0fc8\0\u1108\0\u1130\0\u1158\0\u0820\0\u1180\0\u11a8"+
    "\0\u11d0\0\u11f8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[138];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\2\7"+
    "\1\2\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\2\1\23\1\24\1\25"+
    "\1\2\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\3\2\1\36\1\2\51\0\2\3\1\0\1\3"+
    "\43\0\2\37\2\0\1\37\1\40\42\37\12\0\1\41"+
    "\57\0\1\42\1\43\15\0\1\44\22\0\1\11\1\12"+
    "\2\0\1\45\1\46\4\45\1\0\1\47\34\0\2\12"+
    "\2\0\6\45\1\0\1\47\20\0\2\13\2\0\44\13"+
    "\23\0\1\50\40\0\2\45\2\0\1\51\2\45\1\52"+
    "\2\45\1\0\1\53\3\0\1\53\1\0\1\54\10\0"+
    "\1\53\15\0\2\45\2\0\6\45\1\0\1\53\3\0"+
    "\1\53\3\0\1\53\6\0\1\53\15\0\2\45\2\0"+
    "\1\45\1\55\4\45\1\0\1\53\3\0\1\56\1\57"+
    "\1\0\1\60\2\0\1\53\3\0\1\61\1\53\15\0"+
    "\2\45\2\0\1\62\1\63\2\45\1\64\1\45\1\0"+
    "\1\53\1\65\2\0\1\53\5\0\1\53\1\0\1\66"+
    "\1\0\1\67\1\53\15\0\2\45\2\0\6\45\1\0"+
    "\1\47\5\0\1\70\3\0\1\53\22\0\2\45\2\0"+
    "\6\45\1\0\1\47\53\0\1\71\37\0\1\72\10\0"+
    "\1\73\1\74\2\0\1\75\27\0\1\76\1\77\1\100"+
    "\1\0\1\5\1\0\1\77\4\0\1\101\1\102\1\103"+
    "\2\5\1\0\1\104\5\0\1\5\20\0\1\105\2\0"+
    "\1\106\1\107\11\0\1\110\47\0\1\111\4\0\1\112"+
    "\30\0\1\113\11\0\1\114\51\0\1\5\45\0\1\115"+
    "\4\0\1\116\26\0\1\112\1\0\1\71\11\0\1\117"+
    "\31\0\1\117\1\0\1\120\4\0\1\121\1\53\6\0"+
    "\1\53\1\0\1\53\1\122\1\123\30\0\1\124\45\0"+
    "\1\125\10\0\1\126\2\0\1\117\25\0\2\127\70\0"+
    "\1\130\31\0\1\131\71\0\1\132\25\0\1\133\43\0"+
    "\2\45\2\0\1\134\2\45\1\135\2\45\1\0\1\47"+
    "\4\0\1\5\4\0\1\5\22\0\2\45\2\0\2\45"+
    "\1\134\1\135\2\45\1\0\1\47\43\0\1\5\40\0"+
    "\2\45\2\0\6\45\1\0\1\47\15\0\1\5\24\0"+
    "\1\5\1\104\4\0\1\5\41\0\1\5\14\0\1\136"+
    "\33\0\1\137\47\0\1\104\40\0\2\45\2\0\1\134"+
    "\5\45\1\0\1\47\11\0\1\5\1\140\21\0\2\45"+
    "\2\0\2\45\1\134\3\45\1\0\1\47\64\0\1\104"+
    "\42\0\1\141\33\0\1\106\66\0\1\5\35\0\1\142"+
    "\62\0\1\121\26\0\1\143\17\0\1\144\31\0\1\145"+
    "\47\0\1\104\47\0\1\5\71\0\1\146\40\0\1\5"+
    "\30\0\2\77\1\5\1\0\1\5\1\0\1\77\4\0"+
    "\1\77\2\0\2\5\1\0\1\104\5\0\1\5\27\0"+
    "\1\147\61\0\1\104\26\0\1\5\20\0\1\5\31\0"+
    "\1\150\12\0\1\151\55\0\1\152\36\0\1\5\42\0"+
    "\1\5\60\0\1\5\2\0\1\5\44\0\1\153\51\0"+
    "\1\154\26\0\1\155\62\0\1\104\34\0\1\156\1\0"+
    "\1\5\1\104\4\0\1\5\5\0\1\150\32\0\1\5"+
    "\67\0\1\71\35\0\1\157\40\0\1\160\37\0\1\161"+
    "\3\0\2\127\55\0\1\162\66\0\1\163\25\0\1\164"+
    "\71\0\1\165\46\0\1\166\32\0\1\167\43\0\1\167"+
    "\36\0\1\170\73\0\1\171\52\0\1\5\53\0\1\104"+
    "\54\0\1\104\25\0\1\5\61\0\1\172\51\0\1\173"+
    "\26\0\1\5\4\0\1\5\51\0\1\174\61\0\1\175"+
    "\30\0\1\176\53\0\1\104\63\0\1\123\31\0\1\177"+
    "\43\0\1\177\51\0\1\200\45\0\1\5\50\0\1\5"+
    "\23\0\1\5\6\0\1\201\43\0\2\170\2\0\4\170"+
    "\1\202\37\170\43\0\1\203\30\0\1\5\10\0\1\204"+
    "\33\0\1\5\23\0\1\104\47\0\1\5\34\0\1\167"+
    "\47\0\1\177\56\0\1\205\31\0\1\206\50\0\1\104"+
    "\22\0\1\5\24\0\1\207\51\0\1\210\55\0\1\211"+
    "\37\0\1\212\60\0\1\145\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\1\11\27\1\1\0"+
    "\1\1\5\0\1\1\1\11\3\0\1\11\2\0\1\1"+
    "\4\0\1\1\1\0\1\1\1\0\1\11\6\0\4\1"+
    "\2\0\1\11\27\0\3\1\4\0\2\1\5\0\2\1"+
    "\5\0\1\11\10\0\1\1\1\0\1\1\2\0\1\1"+
    "\2\0\1\1\10\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[138];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
    return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "Error", yyline, yycolumn);
            }
            // fall through
          case 12: break;
          case 2:
            { /* Ignorar */
            }
            // fall through
          case 13: break;
          case 3:
            { return token(yytext(), "Simbolo", yyline, yycolumn);
            }
            // fall through
          case 14: break;
          case 4:
            { return token(yytext(), "Numero Decimal", yyline, yycolumn);
            }
            // fall through
          case 15: break;
          case 5:
            { return token(yytext(), "Variable", yyline, yycolumn);
            }
            // fall through
          case 16: break;
          case 6:
            { return token(yytext(), "Numero Binario", yyline, yycolumn);
            }
            // fall through
          case 17: break;
          case 7:
            { return token(yytext(), "Numero Hexadecimal", yyline, yycolumn);
            }
            // fall through
          case 18: break;
          case 8:
            { return token(yytext(), "Registro", yyline, yycolumn);
            }
            // fall through
          case 19: break;
          case 9:
            { return token(yytext(), "DByte", yyline, yycolumn);
            }
            // fall through
          case 20: break;
          case 10:
            { return token(yytext(), "DWord", yyline, yycolumn);
            }
            // fall through
          case 21: break;
          case 11:
            { return token(yytext(), "Pseudoinstruccion", yyline, yycolumn);
            }
            // fall through
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
