// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/ensambladoresproyecto/Lexer.flex

package ensambladoresproyecto;
import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\0"+
    "\1\5\1\0\1\6\2\0\1\7\1\10\1\11\1\0"+
    "\1\12\1\13\1\14\1\15\1\0\2\16\10\17\1\0"+
    "\1\20\3\0\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\0"+
    "\1\56\1\0\1\43\1\0\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\12\0\1\3"+
    "\73\0\1\43\7\0\1\43\3\0\1\43\3\0\1\43"+
    "\1\0\1\43\6\0\1\43\1\0\1\43\4\0\1\43"+
    "\7\0\1\43\3\0\1\43\3\0\1\43\1\0\1\43"+
    "\6\0\1\43\1\0\1\43\63\0\2\57\115\0\1\60"+
    "\u01a8\0\2\3\u0100\0\1\61\325\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\1\1\3\1\2\1\4\1\1"+
    "\2\5\1\2\1\6\1\1\20\6\3\1\1\0\1\7"+
    "\7\0\1\10\1\11\1\0\2\6\1\12\1\6\1\12"+
    "\3\6\1\12\1\6\1\13\1\12\1\6\1\13\1\12"+
    "\1\11\6\6\1\14\1\6\1\14\13\6\21\0\1\6"+
    "\6\0\1\14\7\6\1\0\4\6\1\0\2\6\1\0"+
    "\2\6\4\0\2\6\4\0\1\5\5\0\1\6\1\0"+
    "\1\6\2\0\1\13\2\6\1\0\1\6\1\0\1\6"+
    "\11\0\1\15\4\0\1\13\42\0\1\16\2\0\1\17"+
    "\2\0\1\20\6\0\1\21\1\0\1\22\1\23\32\0"+
    "\1\24\7\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\62\0\62"+
    "\0\62\0\u012c\0\u015e\0\u0190\0\u01c2\0\62\0\u01f4\0\u0226"+
    "\0\u0258\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6"+
    "\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546"+
    "\0\u0578\0\u05aa\0\226\0\226\0\u05dc\0\u060e\0\u0640\0\u0672"+
    "\0\u06a4\0\u06d6\0\u0708\0\u0708\0\62\0\u073a\0\u076c\0\u079e"+
    "\0\u0352\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\62\0\u08ca"+
    "\0\u0320\0\u08fc\0\u092e\0\u0352\0\u0960\0\u0352\0\u0992\0\u09c4"+
    "\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0352\0\u0abe\0\62\0\u0af0"+
    "\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80"+
    "\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10"+
    "\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0"+
    "\0\u0fd2\0\u1004\0\u1036\0\226\0\u1068\0\u109a\0\u10cc\0\u10fe"+
    "\0\u1130\0\u1162\0\u0320\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c"+
    "\0\u128e\0\u08fc\0\u0960\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388"+
    "\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518"+
    "\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\62"+
    "\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806"+
    "\0\u1838\0\u186a\0\62\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964"+
    "\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4"+
    "\0\u1b26\0\u1b58\0\62\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52"+
    "\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2"+
    "\0\u1e14\0\u1c52\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40"+
    "\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e\0\u20d0"+
    "\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e\0\u2260"+
    "\0\u2292\0\u22c4\0\62\0\u22f6\0\u2328\0\62\0\u235a\0\u238c"+
    "\0\62\0\u23be\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8\0\u1d4c"+
    "\0\u24ea\0\62\0\62\0\u251c\0\u254e\0\u2580\0\u25b2\0\u25e4"+
    "\0\u2616\0\u2648\0\u267a\0\u26ac\0\u26de\0\u2710\0\u2742\0\u2774"+
    "\0\u27a6\0\u27d8\0\u280a\0\u283c\0\u286e\0\u28a0\0\u28d2\0\u2904"+
    "\0\u2936\0\u2968\0\u299a\0\u29cc\0\u29fe\0\62\0\u2a30\0\u2a62"+
    "\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\2\1\5\1\6"+
    "\1\2\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\2\26\1\27\1\30\1\26\1\31\1\32\2\26\1\33"+
    "\2\26\1\34\1\35\2\26\1\36\1\37\2\26\1\40"+
    "\1\2\1\41\1\42\1\2\63\0\2\3\1\0\1\3"+
    "\55\0\2\43\2\0\1\43\1\44\1\43\1\44\54\43"+
    "\2\0\1\43\1\44\1\45\1\44\52\43\14\0\1\46"+
    "\72\0\1\47\1\50\10\0\1\51\5\0\1\52\12\0"+
    "\1\52\17\0\1\13\1\14\3\0\1\53\1\54\4\53"+
    "\1\0\1\55\45\0\2\14\3\0\6\53\1\0\1\55"+
    "\27\0\2\15\2\0\56\15\26\0\1\56\51\0\2\25"+
    "\3\0\1\57\2\25\1\60\2\25\1\26\1\61\3\26"+
    "\1\61\13\26\1\61\2\26\23\0\2\25\3\0\6\25"+
    "\1\26\1\61\3\26\1\61\3\26\1\61\7\26\1\61"+
    "\1\62\1\26\23\0\2\25\3\0\6\25\1\26\1\61"+
    "\3\26\1\63\1\64\1\26\1\65\3\26\1\61\3\26"+
    "\1\66\1\61\2\26\3\0\1\67\17\0\2\25\3\0"+
    "\1\70\1\71\4\25\1\26\1\61\1\72\2\26\1\61"+
    "\6\26\1\61\1\26\1\73\1\26\1\74\1\61\2\26"+
    "\2\0\1\75\1\67\17\0\2\25\3\0\6\25\1\26"+
    "\1\76\5\26\1\77\4\26\1\61\7\26\3\0\1\67"+
    "\17\0\2\25\3\0\6\25\1\26\1\76\22\26\23\0"+
    "\2\26\3\0\32\26\23\0\2\26\3\0\3\26\1\100"+
    "\10\26\1\101\4\26\1\102\10\26\23\0\2\26\3\0"+
    "\1\103\1\26\1\104\10\26\1\105\1\26\1\106\4\26"+
    "\1\105\7\26\3\0\1\107\17\0\2\26\3\0\3\26"+
    "\1\106\1\110\11\26\1\111\13\26\23\0\2\26\3\0"+
    "\16\26\1\112\13\26\23\0\2\26\3\0\16\26\1\113"+
    "\5\26\1\114\5\26\23\0\2\26\3\0\2\26\1\115"+
    "\4\26\1\116\1\61\6\26\1\61\2\26\1\61\1\117"+
    "\6\26\2\0\2\67\17\0\2\26\3\0\4\26\1\120"+
    "\25\26\23\0\2\26\3\0\16\26\1\121\13\26\23\0"+
    "\2\26\3\0\2\26\1\122\27\26\30\0\1\123\1\124"+
    "\1\125\1\126\1\127\15\130\1\131\7\130\3\0\1\132"+
    "\27\0\1\133\10\0\1\134\1\135\3\0\1\136\40\0"+
    "\1\137\1\0\1\140\4\0\1\141\1\67\6\0\1\67"+
    "\2\0\1\67\1\142\1\143\7\0\2\67\1\0\2\43"+
    "\2\0\1\43\1\44\1\43\1\144\52\43\16\0\2\145"+
    "\103\0\1\146\43\0\1\147\77\0\1\150\66\0\1\151"+
    "\31\0\2\53\3\0\6\53\1\0\1\55\52\0\1\152"+
    "\54\0\2\25\3\0\3\25\1\153\2\25\1\26\1\76"+
    "\22\26\3\0\1\16\17\0\2\25\3\0\3\25\1\153"+
    "\2\25\1\26\1\76\22\26\23\0\2\26\3\0\23\26"+
    "\1\154\6\26\23\0\2\26\3\0\3\26\1\105\26\26"+
    "\2\0\1\16\20\0\2\26\3\0\17\26\1\155\12\26"+
    "\23\0\2\26\3\0\3\26\1\156\26\26\23\0\2\26"+
    "\3\0\3\26\1\105\26\26\23\0\2\25\3\0\6\25"+
    "\1\26\1\76\13\26\1\157\6\26\3\0\1\16\17\0"+
    "\2\26\3\0\25\26\1\105\4\26\23\0\2\26\3\0"+
    "\17\26\1\160\12\26\55\0\1\107\27\0\2\26\3\0"+
    "\3\26\1\161\26\26\23\0\2\26\3\0\10\26\1\162"+
    "\21\26\2\0\1\163\20\0\2\26\3\0\24\26\1\116"+
    "\5\26\23\0\2\26\3\0\4\26\1\164\25\26\23\0"+
    "\2\26\3\0\4\26\1\105\25\26\23\0\2\26\3\0"+
    "\27\26\1\165\2\26\23\0\2\26\3\0\22\26\1\105"+
    "\7\26\3\0\1\107\17\0\2\26\3\0\32\26\3\0"+
    "\1\16\17\0\2\26\3\0\3\26\1\155\12\26\1\166"+
    "\13\26\23\0\2\26\3\0\25\26\1\167\4\26\23\0"+
    "\2\26\3\0\17\26\1\105\12\26\23\0\2\26\3\0"+
    "\32\26\3\0\1\170\17\0\2\26\3\0\1\171\31\26"+
    "\23\0\2\26\3\0\13\26\1\105\16\26\23\0\2\26"+
    "\3\0\1\172\2\26\1\105\12\26\1\155\13\26\2\0"+
    "\1\16\20\0\2\26\3\0\32\26\3\0\1\173\17\0"+
    "\2\26\3\0\21\26\1\174\10\26\23\0\2\26\3\0"+
    "\7\26\1\175\22\26\6\0\2\176\1\0\1\176\5\0"+
    "\1\177\3\0\2\130\3\0\7\130\1\200\3\130\1\200"+
    "\13\130\1\200\2\130\6\0\2\176\1\0\1\176\5\0"+
    "\1\177\3\0\2\130\3\0\7\130\1\200\3\130\1\200"+
    "\3\130\1\200\7\130\1\200\2\130\6\0\2\176\1\0"+
    "\1\176\5\0\1\177\3\0\2\130\3\0\7\130\1\200"+
    "\3\130\1\200\6\130\1\200\4\130\1\200\2\130\3\0"+
    "\1\201\2\0\2\176\1\0\1\176\5\0\1\177\3\0"+
    "\2\130\3\0\7\130\2\200\2\130\1\200\6\130\1\200"+
    "\4\130\1\200\2\130\2\0\2\201\2\0\2\176\1\0"+
    "\1\176\5\0\1\177\3\0\2\130\3\0\22\130\1\200"+
    "\7\130\3\0\1\201\2\0\2\176\1\0\1\176\5\0"+
    "\1\177\3\0\2\130\3\0\32\130\6\0\2\176\1\0"+
    "\1\176\5\0\1\177\3\0\2\130\3\0\10\130\1\200"+
    "\6\130\1\200\2\130\1\200\7\130\2\0\2\201\34\0"+
    "\1\201\6\0\1\201\2\0\1\201\11\0\2\201\34\0"+
    "\1\163\23\0\1\163\51\0\1\141\37\0\1\202\20\0"+
    "\1\203\42\0\1\204\76\0\1\16\40\0\1\205\74\0"+
    "\1\107\46\0\1\206\1\0\1\16\1\107\4\0\1\16"+
    "\5\0\1\207\15\0\1\16\26\0\1\16\46\0\1\210"+
    "\4\0\2\145\70\0\1\211\101\0\1\212\41\0\1\213"+
    "\56\0\1\214\104\0\1\215\31\0\2\26\3\0\4\26"+
    "\1\216\25\26\23\0\2\26\3\0\32\26\3\0\1\217"+
    "\17\0\2\26\3\0\4\26\1\220\25\26\23\0\2\26"+
    "\3\0\1\220\31\26\11\0\1\221\3\0\1\222\5\0"+
    "\2\26\3\0\32\26\23\0\2\26\3\0\22\26\1\74"+
    "\7\26\3\0\1\223\17\0\2\26\3\0\23\26\1\105"+
    "\6\26\23\0\2\26\3\0\31\26\1\105\23\0\2\26"+
    "\3\0\17\26\1\224\12\26\23\0\2\26\3\0\22\26"+
    "\1\225\7\26\3\0\1\226\33\0\1\227\45\0\2\26"+
    "\3\0\32\26\3\0\1\230\17\0\2\26\3\0\2\26"+
    "\1\231\27\26\53\0\1\16\31\0\2\26\3\0\3\26"+
    "\1\216\26\26\23\0\2\26\3\0\6\26\1\105\23\26"+
    "\6\0\2\176\1\0\1\176\5\0\1\232\72\0\1\233"+
    "\1\234\1\235\1\236\1\237\15\0\1\240\12\0\1\240"+
    "\2\0\2\176\1\0\1\241\5\0\1\242\3\0\2\130"+
    "\3\0\32\130\1\0\1\243\7\0\1\244\5\0\1\245"+
    "\43\0\1\243\41\0\1\246\64\0\1\16\66\0\1\107"+
    "\60\0\1\230\12\0\1\230\26\0\1\247\101\0\1\217"+
    "\12\0\1\217\30\0\1\250\55\0\1\250\65\0\1\251"+
    "\57\0\1\252\57\0\1\16\42\0\1\253\11\0\2\26"+
    "\3\0\32\26\31\0\1\16\24\0\1\16\14\0\1\254"+
    "\11\0\2\26\3\0\32\26\15\0\1\222\56\0\1\255"+
    "\1\0\1\255\1\256\5\0\1\257\1\260\3\0\6\261"+
    "\47\0\2\26\3\0\15\26\1\103\14\26\23\0\2\26"+
    "\3\0\26\26\1\105\3\26\31\0\1\16\24\0\1\107"+
    "\33\0\1\16\4\0\1\16\102\0\1\16\26\0\2\26"+
    "\3\0\12\26\1\220\17\26\4\0\1\262\1\0\2\263"+
    "\1\0\1\263\107\0\1\264\3\0\1\264\13\0\1\264"+
    "\41\0\1\264\3\0\1\264\3\0\1\264\7\0\1\264"+
    "\41\0\1\264\3\0\1\264\6\0\1\264\4\0\1\264"+
    "\5\0\1\264\33\0\2\264\2\0\1\264\6\0\1\264"+
    "\4\0\1\264\4\0\2\264\46\0\1\264\12\0\1\264"+
    "\34\0\1\264\6\0\1\264\2\0\1\264\11\0\2\264"+
    "\2\0\2\176\1\0\1\176\5\0\1\265\57\0\1\266"+
    "\5\0\2\267\3\0\1\270\1\271\1\272\1\273\1\274"+
    "\15\0\1\275\12\0\1\275\13\0\1\276\57\0\1\266"+
    "\5\0\2\267\3\0\1\277\1\300\1\301\1\302\1\303"+
    "\15\0\1\304\12\0\1\304\50\0\1\305\47\0\1\262"+
    "\23\0\1\262\4\0\1\254\113\0\1\306\60\0\1\250"+
    "\23\0\1\250\42\0\1\307\64\0\1\310\12\0\1\310"+
    "\1\0\2\255\2\0\1\255\1\311\1\255\1\311\52\255"+
    "\14\0\1\312\56\0\1\313\4\0\1\257\1\260\3\0"+
    "\1\261\1\314\4\261\1\0\1\315\40\0\1\313\4\0"+
    "\2\260\3\0\6\261\1\0\1\315\45\0\2\261\3\0"+
    "\6\261\1\0\1\315\30\0\2\263\1\0\1\263\16\0"+
    "\1\233\1\234\1\235\1\236\1\237\15\0\1\240\12\0"+
    "\1\240\57\0\1\316\4\0\2\263\1\0\1\317\71\0"+
    "\1\320\63\0\2\267\36\0\1\321\35\0\1\322\3\0"+
    "\1\322\13\0\1\322\41\0\1\322\3\0\1\322\3\0"+
    "\1\322\7\0\1\322\41\0\1\322\3\0\1\322\6\0"+
    "\1\322\4\0\1\322\5\0\1\322\33\0\2\322\2\0"+
    "\1\322\6\0\1\322\4\0\1\322\4\0\2\322\46\0"+
    "\1\322\12\0\1\322\34\0\1\322\6\0\1\322\2\0"+
    "\1\322\11\0\2\322\5\0\1\323\107\0\1\324\3\0"+
    "\1\324\13\0\1\324\41\0\1\324\3\0\1\324\3\0"+
    "\1\324\7\0\1\324\41\0\1\324\3\0\1\324\6\0"+
    "\1\324\4\0\1\324\5\0\1\324\33\0\2\324\2\0"+
    "\1\324\6\0\1\324\4\0\1\324\4\0\2\324\46\0"+
    "\1\324\12\0\1\324\34\0\1\324\6\0\1\324\2\0"+
    "\1\324\11\0\2\324\27\0\1\325\37\0\1\326\123\0"+
    "\1\137\42\0\1\327\32\0\2\255\2\0\1\255\1\311"+
    "\1\255\1\311\1\255\1\330\50\255\16\0\2\331\53\0"+
    "\1\332\4\0\2\261\3\0\6\261\1\0\1\315\40\0"+
    "\1\333\51\0\2\263\1\0\1\263\16\0\1\334\1\335"+
    "\1\336\1\337\1\340\15\0\1\341\12\0\1\341\17\0"+
    "\2\342\54\0\1\343\43\0\1\316\26\0\1\344\1\345"+
    "\1\346\1\347\1\350\15\0\1\351\12\0\1\351\13\0"+
    "\1\343\76\0\1\16\77\0\1\352\12\0\1\352\32\0"+
    "\1\353\41\0\1\354\4\0\2\331\74\0\1\355\3\0"+
    "\1\355\13\0\1\355\41\0\1\355\3\0\1\355\3\0"+
    "\1\355\7\0\1\355\41\0\1\355\3\0\1\355\6\0"+
    "\1\355\4\0\1\355\5\0\1\355\33\0\2\355\2\0"+
    "\1\355\6\0\1\355\4\0\1\355\4\0\2\355\46\0"+
    "\1\355\12\0\1\355\34\0\1\355\6\0\1\355\2\0"+
    "\1\355\11\0\2\355\12\0\1\356\4\0\2\342\52\0"+
    "\1\357\5\0\2\360\74\0\1\361\3\0\1\361\13\0"+
    "\1\361\41\0\1\361\3\0\1\361\3\0\1\361\7\0"+
    "\1\361\41\0\1\361\3\0\1\361\6\0\1\361\4\0"+
    "\1\361\5\0\1\361\33\0\2\361\2\0\1\361\6\0"+
    "\1\361\4\0\1\361\4\0\2\361\46\0\1\361\12\0"+
    "\1\361\34\0\1\361\6\0\1\361\2\0\1\361\11\0"+
    "\2\361\40\0\1\362\61\0\1\363\33\0\1\313\54\0"+
    "\1\364\51\0\1\316\61\0\1\321\17\0\1\365\63\0"+
    "\2\360\36\0\1\366\7\0\1\364\100\0\1\367\65\0"+
    "\1\370\44\0\1\371\65\0\2\372\100\0\1\373\63\0"+
    "\1\374\25\0\1\343\66\0\1\375\4\0\2\372\100\0"+
    "\1\223\71\0\1\223\71\0\1\366\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11150];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\3\11\4\1\1\11\24\1\1\0"+
    "\1\1\7\0\1\1\1\11\1\0\10\1\1\11\17\1"+
    "\1\11\13\1\21\0\1\1\6\0\10\1\1\0\4\1"+
    "\1\0\2\1\1\0\2\1\4\0\2\1\4\0\1\11"+
    "\5\0\1\1\1\0\1\1\2\0\1\11\2\1\1\0"+
    "\1\1\1\0\1\1\11\0\1\11\4\0\1\1\42\0"+
    "\1\11\2\0\1\11\2\0\1\11\6\0\1\1\1\0"+
    "\2\11\32\0\1\11\7\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
    return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(),"Elemento no identificado",yyline, yycolumn);
            }
            // fall through
          case 21: break;
          case 2:
            { /* Ignorar */
            }
            // fall through
          case 22: break;
          case 3:
            { return token(yytext(), "Mas", yyline, yycolumn);
            }
            // fall through
          case 23: break;
          case 4:
            { return token(yytext(), "Menos", yyline, yycolumn);
            }
            // fall through
          case 24: break;
          case 5:
            { return token(yytext(), "Numero Decimal", yyline, yycolumn);
            }
            // fall through
          case 25: break;
          case 6:
            { return token(yytext(), "Simbolo", yyline, yycolumn);
            }
            // fall through
          case 26: break;
          case 7:
            { return token(yytext(), "Constante", yyline, yycolumn);
            }
            // fall through
          case 27: break;
          case 8:
            { return token(yytext(), "Numero Binario", yyline, yycolumn);
            }
            // fall through
          case 28: break;
          case 9:
            { return token(yytext(), "Numero Hexadecimal", yyline, yycolumn);
            }
            // fall through
          case 29: break;
          case 10:
            { return token(yytext(), "Registro", yyline, yycolumn);
            }
            // fall through
          case 30: break;
          case 11:
            { return token(yytext(), "Pseudoinstruccion", yyline, yycolumn);
            }
            // fall through
          case 31: break;
          case 12:
            { return token(yytext(), "Instruccion", yyline, yycolumn);
            }
            // fall through
          case 32: break;
          case 13:
            { return token(yytext(), "Simbolo con Registro", yyline, yycolumn);
            }
            // fall through
          case 33: break;
          case 14:
            { return token(yytext(), "Pseudoinstruccion y constante decimal", yyline, yycolumn);
            }
            // fall through
          case 34: break;
          case 15:
            { return token(yytext(), "Simbolo con Simbolo y Registro", yyline, yycolumn);
            }
            // fall through
          case 35: break;
          case 16:
            { return token(yytext(), "Simbolo con Registro y numero Decimal", yyline, yycolumn);
            }
            // fall through
          case 36: break;
          case 17:
            { return token(yytext(), "Pseudoinstruccion y constante", yyline, yycolumn);
            }
            // fall through
          case 37: break;
          case 18:
            { return token(yytext(), "Pseudoinstruccion y constante binario", yyline, yycolumn);
            }
            // fall through
          case 38: break;
          case 19:
            { return token(yytext(), "Pseudoinstruccion y constante hexadecimal", yyline, yycolumn);
            }
            // fall through
          case 39: break;
          case 20:
            { return token(yytext(), "Simbolo con Registro, Registro y numero Decimal", yyline, yycolumn);
            }
            // fall through
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
